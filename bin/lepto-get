#!/usr/bin/env python
import numpy as np

def plotEvolution(data, f_out):
    import pylab
    pylab.plot(data[:,0], abs(data[:,1]), label="$N_{\\tau\\tau}$")
    pylab.plot(data[:,0], abs(data[:,2]), label="$N_{\mu\mu}$")
    pylab.plot(data[:,0], abs(data[:,3]), label="$N_{ee}$")
    pylab.legend()
    pylab.xlabel("$z$")
    pylab.yscale("log")
    pylab.ylabel("$\left|N_{xx} \\right|$")
    pylab.savefig(f_out)


import optparse, os, sys
op = optparse.OptionParser(usage=__doc__)
op.add_option("-o", "--output",    dest="OUTPUT",      default=None, type=str, help="Output file name for evolution plots/data --- if not provided, only calculate etaB (default: %default)")
op.add_option("-v", "--debug",     dest="DEBUG",       default=False, action="store_true", help="Turn on some debug messages")
op.add_option("-q", "--quiet",     dest="QUIET",       default=False, action="store_true", help="Turn off messages")
op.add_option("-m", "--model",     dest="MODEL",       default="1ds", help="Selection of of model")
op.add_option("--ordering",        dest="ORDERING",    default=0, type=int,                help="The mass ordering (0 or 1, default: %default)")
opts, args = op.parse_args()


if len(args)==0:
    print("No parameter space configuration given, exiting.")
    sys.exit(1)

import leptomts
LEPTO = leptomts.selectLepto(opts.MODEL)

if opts.DEBUG:
    print(LEPTO)

_, FIX = leptomts.readConfig(args[0])


# Sanity check for ordering
if opts.ORDERING not in [0,1]:
    print( "Error, ordering has to be either 0 or 1, exiting")
    sys.exit(1)

FIX["ordering"]=opts.ORDERING


for _ in range(100):
    etaB = LEPTO(FIX)
print("{}{}\n{}{}\n{}{}".format(
    "eta_b".ljust(      14), etaB,
    "Y_b".ljust(        14), etaB/7.03969,
    "Omega_b h^2".ljust(14), etaB/274.*1e10)
    )
if opts.OUTPUT is not None:
    if opts.OUTPUT.endswith(".txt"):
        np.savetxt(opts.OUTPUT, LEPTO.evolData)
    elif opts.OUTPUT.endswith(".csv"):
        np.savetxt(opts.OUTPUT, LEPTO.evolData, delimiter=",")
    else:
        plotEvolution(LEPTO.evolData, opts.OUTPUT)
    if opts.DEBUG:
        print("Output written to {}".format(opts.OUTPUT))

